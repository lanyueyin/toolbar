Index: toolbar/src/main/java/com/nibushi/toolbar/toolbar/Toolbar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/src/main/java/com/nibushi/toolbar/toolbar/Toolbar.java	(date 1700374615007)
+++ toolbar/src/main/java/com/nibushi/toolbar/toolbar/Toolbar.java	(date 1700374615007)
@@ -0,0 +1,256 @@
+package com.nibushi.toolbar.toolbar;
+
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.LinearLayout;
+
+import com.nibushi.toolbar.R;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.util.HashMap;
+import java.util.Map;
+
+import androidx.annotation.IntDef;
+import androidx.annotation.Nullable;
+
+public class Toolbar extends LinearLayout {
+    public static final String LEFT = "left";
+    public static final String TITLE = "title";
+    public static final String RIGHT = "right";
+
+    private Map<String, LinearLayout> targetViewMap;
+
+    //通过android:labelFor属性设置的控件
+    private View labelView;
+    //上一次设置labelFor中的控件的margin时，记录下的标题栏高度
+    private int lastMeasuredHeight;
+
+    //标题栏的title是否需要居中
+    private boolean isTitleInCenter = true;
+
+    public Toolbar(Context context) {
+        super(context);
+        init();
+    }
+
+    public Toolbar(Context context, @Nullable AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    public Toolbar(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init();
+    }
+
+    private void init(){
+        //根据全屏状态设置，是否需要添加一个内边距保持不被系统状态栏遮挡
+        setFitsSystemWindows(isWindowTranslucentStatusTrue());
+        setElevation(1);
+        setOrientation(LinearLayout.VERTICAL);
+
+        View view = LayoutInflater.from(getContext()).inflate(R.layout.tool_bar_view, this, false);
+        addView(view);
+
+        targetViewMap = new HashMap<>();
+        targetViewMap.put(LEFT, view.findViewById(R.id.leftLayout));
+        targetViewMap.put(TITLE, view.findViewById(R.id.titleLayout));
+        targetViewMap.put(RIGHT, view.findViewById(R.id.rightLayout));
+    }
+
+    /**设置一个模版，根据这个模板创建控件
+     * @param mould 模板，需要继承{@link ToolbarBaseMould}接口实现
+     */
+    public void setMould(ToolbarBaseMould mould){
+        if(mould == null) return;
+
+        for(String target : targetViewMap.keySet()){
+            //清空已有的控件
+            targetViewMap.get(target).removeAllViews();
+            //获取子控件
+            View childView = null;
+            if(LEFT.equals(target)){
+                childView = mould.initLeftMould(getContext());
+            }else if(TITLE.equals(target)){
+                childView = mould.initTitleMould(getContext());
+            }else if(RIGHT.equals(target)){
+                childView = mould.initRightMould(getContext());
+            }
+            //添加子控件
+            if(childView != null) {
+                targetViewMap.get(target).setVisibility(VISIBLE);
+                targetViewMap.get(target).addView(childView);
+            }else {
+                targetViewMap.get(target).setVisibility(GONE);
+            }
+        }
+    }
+
+    /**是否是全屏
+     * @return
+     */
+    private boolean isWindowTranslucentStatusTrue() {
+        int[] attr = new int[]{android.R.attr.windowTranslucentStatus};
+        TypedArray array = getContext().getTheme().obtainStyledAttributes(attr);
+        boolean windowTranslucentStatus = array.getBoolean(0  , false);
+        array.recycle();
+        return windowTranslucentStatus;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        layout();
+        addMarginToLabelView();
+    }
+
+    @Override
+    public void setLabelFor(int id) {
+        super.setLabelFor(id);
+        addMarginToLabelView();
+    }
+
+    /**查找到xml里labelFor属性中的控件
+     * @param view 查找范围
+     * @return
+     */
+    private View findLabelView(View view){
+        if(view.getParent() instanceof View){
+            View parentView = (View) view.getParent();
+            View labelView = parentView.findViewById(getLabelFor());
+            if(labelView != null){
+                return labelView;
+            }else {
+                return findLabelView(parentView);
+            }
+        }
+        return null;
+    }
+
+    /**为xml里labelFor属性中的控件添加标题栏高度的外边距，防止标题栏遮挡
+     *
+     */
+    private void addMarginToLabelView(){
+        //查找到xml里labelFor属性中的控件
+        if(labelView == null){
+            labelView = findLabelView(this);
+        }
+        if(labelView == null) return;
+
+        MarginLayoutParams layoutParams = (MarginLayoutParams) labelView.getLayoutParams();
+        //去除上一次添加的标题栏高度，就是当前labelFor属性中的控件的实际外边距
+        layoutParams.topMargin = layoutParams.topMargin - lastMeasuredHeight;
+        //重新增加一个标题栏高度的外边距，使得标题栏不遮挡住这个控件
+        layoutParams.topMargin = layoutParams.topMargin + getMeasuredHeight();
+        labelView.setLayoutParams(layoutParams);
+        //记录本次添加的标题栏高度
+        lastMeasuredHeight = getMeasuredHeight();
+    }
+
+    /**给titleLayout设置左内边距或右内边距，使得titleLayout中的内容一直居中
+     *
+     */
+    private void layout(){
+        if(!isTitleInCenter) return;
+
+        //给titleLayout设置左内边距或右内边距，使得titleLayout中的内容一直居中
+        int disparity = targetViewMap.get(LEFT).getMeasuredWidth() - targetViewMap.get(RIGHT).getMeasuredWidth();
+        targetViewMap.get(TITLE).setPadding(disparity < 0 ? Math.abs(disparity) : 0, 0, Math.max(disparity, 0), 0);
+    }
+
+    /**标题是否居中显示
+     * @param titleInCenter true 或 false
+     * @return
+     */
+    public Toolbar setTitleInCenter(boolean titleInCenter) {
+        isTitleInCenter = titleInCenter;
+        return this;
+    }
+
+    /**为指定目标添加内边距
+     * @param target 可选值{@link Toolbar#LEFT}，{@link Toolbar#TITLE}，{@link Toolbar#RIGHT}
+     * @param left 左边距
+     * @param top 上边距
+     * @param right 右边距
+     * @param bottom 下边距
+     * @return
+     */
+    public Toolbar setTargetPadding(String target, int left, int top, int right, int bottom){
+        targetViewMap.get(target).setPadding(left, top, right, bottom);
+        return this;
+    }
+    /**向对应目标添加组件
+     * @param target 可选值{@link Toolbar#LEFT}，{@link Toolbar#TITLE}，{@link Toolbar#RIGHT}
+     * @param layoutId 布局ID
+     * @return
+     */
+    public Toolbar addTargetView(String target, int layoutId){
+        LayoutInflater.from(getContext()).inflate(layoutId, targetViewMap.get(target), true);
+        return this;
+    }
+
+    /**向对应目标添加组件，并且制定组件的添加位置
+     * @param target 可选值{@link Toolbar#LEFT}，{@link Toolbar#TITLE}，{@link Toolbar#RIGHT}
+     * @param layoutId 布局ID
+     * @param index 在目标中的位置
+     * @return
+     */
+    public Toolbar addTargetView(String target, int layoutId, int index){
+        View view = LayoutInflater.from(getContext()).inflate(layoutId, targetViewMap.get(target), false);
+        targetViewMap.get(target).addView(view, index);
+        return this;
+    }
+
+    /**向对应目标添加组件
+     * @param target target 可选值{@link Toolbar#LEFT}，{@link Toolbar#TITLE}，{@link Toolbar#RIGHT}
+     * @param view 组件
+     * @return
+     */
+    public Toolbar addTargetView(String target, View view){
+        targetViewMap.get(target).addView(view);
+        return this;
+    }
+
+    /**向对应目标添加组件，并且制定组件的添加位置
+     * @param target 可选值{@link Toolbar#LEFT}，{@link Toolbar#TITLE}，{@link Toolbar#RIGHT}
+     * @param view 组件
+     * @param index 在目标中的位置
+     * @return
+     */
+    public Toolbar addTargetView(String target, View view, int index){
+        targetViewMap.get(target).addView(view, index);
+        return this;
+    }
+
+    /**移除目标中某个位置的组件
+     * @param target 可选值{@link Toolbar#LEFT}，{@link Toolbar#TITLE}，{@link Toolbar#RIGHT}
+     * @param index 在目标中的位置
+     * @return
+     */
+    public Toolbar removeTargetView(String target, int index){
+        targetViewMap.get(target).removeViewAt(index);
+        return this;
+    }
+
+    /**设置目标中的组件的排列方向
+     * @param target 可选值{@link Toolbar#LEFT}，{@link Toolbar#TITLE}，{@link Toolbar#RIGHT}
+     * @param orientation 可选值{@link Toolbar#HORIZONTAL}，{@link Toolbar#VERTICAL}
+     * @return
+     */
+    public Toolbar setTargetOrientation(String target, @OrientationMode int orientation){
+        targetViewMap.get(target).setOrientation(orientation);
+        return this;
+    }
+
+    /** @hide */
+    @IntDef({HORIZONTAL, VERTICAL})
+    @Retention(RetentionPolicy.SOURCE)
+    public @interface OrientationMode {}
+
+    public static final int HORIZONTAL = 0;
+    public static final int VERTICAL = 1;
+}
Index: toolbar/src/main/java/com/nibushi/toolbar/toolbar/ToolbarBaseMouldImp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/src/main/java/com/nibushi/toolbar/toolbar/ToolbarBaseMouldImp.java	(date 1700372205933)
+++ toolbar/src/main/java/com/nibushi/toolbar/toolbar/ToolbarBaseMouldImp.java	(date 1700372205933)
@@ -0,0 +1,24 @@
+package com.nibushi.toolbar.toolbar;
+
+import android.content.Context;
+import android.view.View;
+
+public interface ToolbarBaseMouldImp {
+    /**设置左边控件的初始化模板
+     * @param context 上下文
+     * @return
+     */
+    View initLeftMould(Context context);
+
+    /**设置标题控件的初始化模板
+     * @param context 上下文
+     * @return
+     */
+    View initTitleMould(Context context);
+
+    /**设置右边控件的初始化模板
+     * @param context 上下文
+     * @return 设置好的模板
+     */
+    View initRightMould(Context context);
+}
Index: toolbar/src/main/res/layout/tool_bar_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/src/main/res/layout/tool_bar_view.xml	(date 1700375921642)
+++ toolbar/src/main/res/layout/tool_bar_view.xml	(date 1700375921642)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal"
+    android:minHeight="44dp"
+    android:id="@+id/toolbarView"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content">
+    <LinearLayout
+        android:id="@+id/leftLayout"
+        android:orientation="horizontal"
+        android:gravity="center"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent">
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/titleLayout"
+        android:orientation="vertical"
+        android:layout_weight="1"
+        android:layout_width="0dp"
+        android:gravity="center"
+        android:layout_height="match_parent">
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/rightLayout"
+        android:orientation="horizontal"
+        android:gravity="center"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent">
+
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
Index: toolbar/src/test/java/com/nibushi/toolbar/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/src/test/java/com/nibushi/toolbar/ExampleUnitTest.java	(date 1700371251307)
+++ toolbar/src/test/java/com/nibushi/toolbar/ExampleUnitTest.java	(date 1700371251307)
@@ -0,0 +1,17 @@
+package com.nibushi.toolbar;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
Index: toolbar/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/proguard-rules.pro	(date 1700371251089)
+++ toolbar/proguard-rules.pro	(date 1700371251089)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
\ No newline at end of file
Index: toolbar/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/build.gradle	(date 1700376158890)
+++ toolbar/build.gradle	(date 1700376158890)
@@ -0,0 +1,48 @@
+plugins {
+    id 'com.android.library'
+}
+
+android {
+    compileSdkVersion 30
+    buildToolsVersion "30.0.2"
+
+    defaultConfig {
+        minSdkVersion 21
+        targetSdkVersion 30
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+        consumerProguardFiles "consumer-rules.pro"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+}
+
+dependencies {
+    implementation 'androidx.appcompat:appcompat:1.3.1'
+}
+
+//修改jar名字+将指定jar生成的地方
+task makeJar(type:Copy){
+    //如果之前存在，则先删除
+    delete 'build/libs/toolbar.jar'
+    //设置拷贝的文件
+    from('build/intermediates/packaged-classes/debug/')
+    //生成jar包后的文件目录位置
+    into('build/libs/')
+    //include,exclude参数来设置过滤
+    include('classes.jar')
+    //重命名
+    rename('classes.jar','demo.jar')
+}
+makeJar.dependsOn(build)
\ No newline at end of file
Index: toolbar/src/main/java/com/nibushi/toolbar/toolbar/ToolbarBaseMould.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/src/main/java/com/nibushi/toolbar/toolbar/ToolbarBaseMould.java	(date 1700371304302)
+++ toolbar/src/main/java/com/nibushi/toolbar/toolbar/ToolbarBaseMould.java	(date 1700371304302)
@@ -0,0 +1,13 @@
+package com.nibushi.toolbar.toolbar;
+
+
+public abstract class ToolbarBaseMould implements ToolbarBaseMouldImp {
+    private Toolbar toolbar;
+    public ToolbarBaseMould(Toolbar toolbar) {
+        this.toolbar = toolbar;
+        toolbar.setMould(this);
+    }
+    public Toolbar getToolbar() {
+        return toolbar;
+    }
+}
Index: toolbar/src/androidTest/java/com/nibushi/toolbar/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/src/androidTest/java/com/nibushi/toolbar/ExampleInstrumentedTest.java	(date 1700371251292)
+++ toolbar/src/androidTest/java/com/nibushi/toolbar/ExampleInstrumentedTest.java	(date 1700371251292)
@@ -0,0 +1,26 @@
+package com.nibushi.toolbar;
+
+import android.content.Context;
+
+import androidx.test.platform.app.InstrumentationRegistry;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
+        assertEquals("com.nibushi.toolbar.test", appContext.getPackageName());
+    }
+}
\ No newline at end of file
Index: toolbar/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/src/main/AndroidManifest.xml	(date 1700371251255)
+++ toolbar/src/main/AndroidManifest.xml	(date 1700371251255)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.nibushi.toolbar">
+
+</manifest>
\ No newline at end of file
Index: toolbar/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- toolbar/.gitignore	(date 1700371251024)
+++ toolbar/.gitignore	(date 1700371251024)
@@ -0,0 +1,1 @@
+/build
\ No newline at end of file
diff --git toolbar/consumer-rules.pro toolbar/consumer-rules.pro
new file mode 100644
